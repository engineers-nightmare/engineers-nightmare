/* THIS FILE IS AUTOGENERATED BY gen/gen_comps.py; DO NOT HAND-MODIFY */

#include <vector>
#include "../component/component_system_manager.h"

extern component_system_manager component_system_man;

std::vector<std::pair<const std::string, std::string>> get_filters(c_entity entity) {
    std::vector<std::pair<const std::string, std::string>> filters;

% for name, comp in sorted(comps.items()):
    % for field in comp.body_fields:
        % if field['type'] == "wire_filter_ptr":
    auto &${comp.comp_name}_man = component_system_man.managers.${comp.comp_name}_component_man;
    if (${comp.comp_name}_man.exists(entity)) {
        auto ${comp.comp_name} = ${comp.comp_name}_man.get_instance_data(entity);
        filters.emplace_back("${comp.comp_name}", (${comp.comp_name}.${field['name']}->wrapped && !${comp.comp_name}.${field['name']}->wrapped->empty()) ? (*${comp.comp_name}.${field['name']}->wrapped) : "");
    }

        % endif
    % endfor
% endfor
    return filters;
}

void update_filter(c_entity entity, std::string const& comp, char filter[256]) {
% for name, comp in sorted(comps.items()):
    % for field in comp.body_fields:
        % if field['type'] == "wire_filter_ptr":
    if (comp == "${comp.comp_name}") {
        auto &${comp.comp_name}_man = component_system_man.managers.${comp.comp_name}_component_man;
        if (${comp.comp_name}_man.exists(entity)) {
            auto ${comp.comp_name} = ${comp.comp_name}_man.get_instance_data(entity);
            ${comp.comp_name}.${field['name']}->set(filter);
        }
    }

        % endif
    % endfor
% endfor
}
