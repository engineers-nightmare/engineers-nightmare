/* THIS FILE IS AUTOGENERATED BY gen/gen_comps.py; DO NOT HAND-MODIFY */

#include <vector>
#include "../component/component_system_manager.h"

extern component_system_manager component_system_man;
extern std::unordered_map<c_entity, std::vector<c_entity>> entity_families;

static void add_filter(std::vector<filter_ui_state> &filters, int field_id, wire_filter_ptr const & w, char const *name) {
    filters.emplace_back();
    auto & f = filters.back();
    f.component_name = name;
    f.field_id = field_id;
    f.type = w.type;

    if (w.wrapped) {
        strcpy(f.filter.data(), w.wrapped->c_str());
    }
    else {
        f.filter[0] = '\0';
    }
}

std::vector<filter_ui_state> get_filters(c_entity entity) {
    std::vector<filter_ui_state> filters;

% for name, comp in sorted(comps.items()):
    % if any(f for f in comp.body_fields if f['type'] == 'wire_filter_ptr'):
    auto &${comp.comp_name}_man = component_system_man.managers.${comp.comp_name}_component_man;
    if (${comp.comp_name}_man.exists(entity)) {
    % for field in comp.body_fields:
        % if field['type'] == "wire_filter_ptr":
        {
            auto ${comp.comp_name} = ${comp.comp_name}_man.get_instance_data(entity);
            add_filter(filters, ${field['field_id']}, *(${comp.comp_name}.${field['name']}),
                "${comp.ui_name}/${field['name']}");
            filters.back().entity = entity;
        }
        % endif
    % endfor
    }
    % endif
% endfor

    for (auto e : entity_families[entity]) {
        auto f = get_filters(e);
        filters.insert(filters.end(), f.begin(), f.end());
    }

    std::sort(filters.begin(), filters.end(),
         [](filter_ui_state const &a, filter_ui_state const &b)
         {
             return a.entity < b.entity || (a.entity < b.entity && a.field_id < b.field_id);
         });

    return filters;
}

void update_filter(filter_ui_state const& filter) {
    auto entity = filter.entity;
    switch (filter.field_id) {
% for name, comp in sorted(comps.items()):
    % for field in comp.body_fields:
        % if field['type'] == "wire_filter_ptr":
    case ${field['field_id']}: {
        auto &${comp.comp_name}_man = component_system_man.managers.${comp.comp_name}_component_man;
        if (${comp.comp_name}_man.exists(entity)) {
            auto ${comp.comp_name} = ${comp.comp_name}_man.get_instance_data(entity);
            ${comp.comp_name}.${field['name']}->set(filter);
        }
    } break;

        % endif
    % endfor
% endfor
    }
}
