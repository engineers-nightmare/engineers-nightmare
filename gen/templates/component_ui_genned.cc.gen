/* THIS FILE IS AUTOGENERATED BY gen/gen_comps.py; DO NOT HAND-MODIFY */

#include <vector>
#include "../component/component_system_manager.h"

extern component_system_manager component_system_man;

std::vector<filter_ui_state> get_filters(c_entity entity) {
    std::vector<filter_ui_state> filters;

% for name, comp in sorted(comps.items()):
    % for field in comp.body_fields:
        % if field['type'] == "wire_filter_ptr":
    auto &${comp.comp_name}_man = component_system_man.managers.${comp.comp_name}_component_man;
    if (${comp.comp_name}_man.exists(entity)) {
        auto ${comp.comp_name} = ${comp.comp_name}_man.get_instance_data(entity);
        auto filter = (${comp.comp_name}.${field['name']}->wrapped && !${comp.comp_name}.${field['name']}->wrapped->empty()) ? (*${comp.comp_name}.${field['name']}->wrapped).c_str() : "";
        filters.emplace_back();
        auto & f = filters.back();
        f.component_name = "${comp.ui_name}";
        f.field_id = ${field['field_id']};
        strcpy(f.filter.data(), filter);
    }

        % endif
    % endfor
% endfor
    return filters;
}

void update_filter(c_entity entity, filter_ui_state const& filter) {
    switch (filter.field_id) {
% for name, comp in sorted(comps.items()):
    % for field in comp.body_fields:
        % if field['type'] == "wire_filter_ptr":
    case ${field['field_id']}: {
        auto &${comp.comp_name}_man = component_system_man.managers.${comp.comp_name}_component_man;
        if (${comp.comp_name}_man.exists(entity)) {
            auto ${comp.comp_name} = ${comp.comp_name}_man.get_instance_data(entity);
            ${comp.comp_name}.${field['name']}->set(filter.filter.data());
        }
    } break;

        % endif
    % endfor
% endfor
    }
}
