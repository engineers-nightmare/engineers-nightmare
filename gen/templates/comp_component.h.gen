#pragma once

/* THIS FILE IS AUTOGENERATED BY gen/gen_comps.py; DO NOT HAND-MODIFY */

#include <libconfig.h>
#include <memory>

#include "component_manager.h"
#include "../enums/enums.h"

struct ${comp_name}_component_manager : component_manager {
    struct instance_data {
        c_entity *entity;
% for body in comp.body_fields:
        ${body['type']} *${body['name']};
% endfor
    } instance_pool;

    void create_component_instance_data(unsigned count) override;
    void destroy_instance(instance i) override;
    void entity(c_entity e) override;

    instance_data get_instance_data(c_entity e) {
        instance_data d{};
        auto inst = lookup(e);

        d.entity = instance_pool.entity + inst.index;
% for body in comp.body_fields:
        d.${body['name']} = instance_pool.${body['name']} + inst.index;
% endfor

        return d;
    }
};

struct ${comp_name}_component_stub : component_stub {
    ${comp_name}_component_stub() = default;

% for stub in comp.stub_fields:
    ${stub['otype']} ${stub['name']}{};
% endfor

    void
    assign_component_to_entity(c_entity entity) override;

    static std::unique_ptr<component_stub> from_config(config_setting_t const *config);

    std::vector<std::string>
    get_dependencies() override;
};
