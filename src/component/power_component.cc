/* THIS FILE IS AUTOGENERATED BY gen/gen_component_impl.py; DO NOT HAND-MODIFY */

#include <algorithm>
#include <string.h>
#include <memory>

#include "../memory.h"
#include "power_component.h"
#include "component_system_manager.h"

extern component_system_manager component_system_man;

void
power_component_manager::create_component_instance_data(unsigned count) {
    if (count <= buffer.allocated)
        return;

    component_buffer new_buffer{};
    instance_data new_pool{};

    size_t size = sizeof(c_entity) * count;
    size = sizeof(float) * count + align_size<float>(size);
    size = sizeof(bool) * count + align_size<bool>(size);
    size = sizeof(float) * count + align_size<float>(size);
    size = sizeof(unsigned) * count + align_size<unsigned>(size);
    size += 16;   // for worst-case misalignment of initial ptr

    new_buffer.buffer = malloc(size);
    new_buffer.num = buffer.num;
    new_buffer.allocated = count;
    memset(new_buffer.buffer, 0, size);

    new_pool.entity = align_ptr((c_entity *)new_buffer.buffer);
    new_pool.required_power = align_ptr((float *)(new_pool.entity + count));
    new_pool.powered = align_ptr((bool *)(new_pool.required_power + count));
    new_pool.max_required_power = align_ptr((float *)(new_pool.powered + count));
    new_pool.network = align_ptr((unsigned *)(new_pool.max_required_power + count));

    memcpy(new_pool.entity, instance_pool.entity, buffer.num * sizeof(c_entity));
    memcpy(new_pool.required_power, instance_pool.required_power, buffer.num * sizeof(float));
    memcpy(new_pool.powered, instance_pool.powered, buffer.num * sizeof(bool));
    memcpy(new_pool.max_required_power, instance_pool.max_required_power, buffer.num * sizeof(float));
    memcpy(new_pool.network, instance_pool.network, buffer.num * sizeof(unsigned));

    free(buffer.buffer);
    buffer = new_buffer;

    instance_pool = new_pool;
}

void
power_component_manager::destroy_instance(instance i) {
    auto last_index = buffer.num - 1;
    auto last_entity = instance_pool.entity[last_index];
    auto current_entity = instance_pool.entity[i.index];

    instance_pool.entity[i.index] = instance_pool.entity[last_index];
    instance_pool.required_power[i.index] = instance_pool.required_power[last_index];
    instance_pool.powered[i.index] = instance_pool.powered[last_index];
    instance_pool.max_required_power[i.index] = instance_pool.max_required_power[last_index];
    instance_pool.network[i.index] = instance_pool.network[last_index];

    entity_instance_map[last_entity] = i.index;
    entity_instance_map.erase(current_entity);

    --buffer.num;
}

void
power_component_manager::entity(c_entity e) {
    if (buffer.num >= buffer.allocated) {
        printf("Increasing size of power buffer. Please adjust\n");
        create_component_instance_data(std::max(1u, buffer.allocated) * 2);
    }

    auto inst = lookup(e);

    instance_pool.entity[inst.index] = e;
}

void
power_component_stub::assign_component_to_entity(c_entity entity) {
    auto &man = component_system_man.managers.power_component_man;

    man.assign_entity(entity);

    auto data = man.get_instance_data(entity);        

    *data.required_power = required_power;

    *data.powered = false;

    *data.max_required_power = max_required_power;

    *data.network = 0;
};

std::unique_ptr<component_stub> power_component_stub::from_config(const config_setting_t *config) {
    auto power_stub = std::make_unique<power_component_stub>();

    power_stub->required_power = load_value_from_config<float>(config, "required_power");

    power_stub->max_required_power = load_value_from_config<float>(config, "max_required_power");

    return std::move(power_stub);
}

std::vector<std::string> power_component_stub::get_dependencies() {
    return {
        
    };
}
