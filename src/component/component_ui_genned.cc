/* THIS FILE IS AUTOGENERATED BY gen/gen_comps.py; DO NOT HAND-MODIFY */

#include <vector>
#include "../component/component_system_manager.h"

extern component_system_manager component_system_man;

std::vector<filter_ui_state> get_filters(c_entity entity) {
    std::vector<filter_ui_state> filters;

    auto &gas_producer_man = component_system_man.managers.gas_producer_component_man;
    if (gas_producer_man.exists(entity)) {
        auto gas_producer = gas_producer_man.get_instance_data(entity);
        auto filter = (gas_producer.filter->wrapped && !gas_producer.filter->wrapped->empty()) ? (*gas_producer.filter->wrapped).c_str() : "";
        filters.emplace_back();
        auto & f = filters.back();
        f.component_name = "Gas Producer";
        f.field_id = 0;
        strcpy(f.filter.data(), filter);
    }

    auto &light_man = component_system_man.managers.light_component_man;
    if (light_man.exists(entity)) {
        auto light = light_man.get_instance_data(entity);
        auto filter = (light.filter->wrapped && !light.filter->wrapped->empty()) ? (*light.filter->wrapped).c_str() : "";
        filters.emplace_back();
        auto & f = filters.back();
        f.component_name = "Light";
        f.field_id = 1;
        strcpy(f.filter.data(), filter);
    }

    auto &rotator_man = component_system_man.managers.rotator_component_man;
    if (rotator_man.exists(entity)) {
        auto rotator = rotator_man.get_instance_data(entity);
        auto filter = (rotator.filter->wrapped && !rotator.filter->wrapped->empty()) ? (*rotator.filter->wrapped).c_str() : "";
        filters.emplace_back();
        auto & f = filters.back();
        f.component_name = "Rotator";
        f.field_id = 2;
        strcpy(f.filter.data(), filter);
    }

    return filters;
}

void update_filter(c_entity entity, filter_ui_state const& filter) {
    switch (filter.field_id) {
    case 0: {
        auto &gas_producer_man = component_system_man.managers.gas_producer_component_man;
        if (gas_producer_man.exists(entity)) {
            auto gas_producer = gas_producer_man.get_instance_data(entity);
            gas_producer.filter->set(filter.filter.data());
        }
    } break;

    case 1: {
        auto &light_man = component_system_man.managers.light_component_man;
        if (light_man.exists(entity)) {
            auto light = light_man.get_instance_data(entity);
            light.filter->set(filter.filter.data());
        }
    } break;

    case 2: {
        auto &rotator_man = component_system_man.managers.rotator_component_man;
        if (rotator_man.exists(entity)) {
            auto rotator = rotator_man.get_instance_data(entity);
            rotator.filter->set(filter.filter.data());
        }
    } break;

    }
}
