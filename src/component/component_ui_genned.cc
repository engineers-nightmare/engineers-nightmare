/* THIS FILE IS AUTOGENERATED BY gen/gen_comps.py; DO NOT HAND-MODIFY */

#include <vector>
#include "../component/component_system_manager.h"

extern component_system_manager component_system_man;

std::vector<std::pair<const std::string, std::array<char, 256>>> get_filters(c_entity entity) {
    std::vector<std::pair<const std::string, std::array<char, 256>>> filters;

    auto &gas_producer_man = component_system_man.managers.gas_producer_component_man;
    if (gas_producer_man.exists(entity)) {
        auto gas_producer = gas_producer_man.get_instance_data(entity);
        auto filter = (gas_producer.filter->wrapped && !gas_producer.filter->wrapped->empty()) ? (*gas_producer.filter->wrapped).c_str() : "";
        std::array<char, 256> f;
        strcpy(f.data(), filter);
        filters.emplace_back("Gas Producer", f);
    }

    auto &light_man = component_system_man.managers.light_component_man;
    if (light_man.exists(entity)) {
        auto light = light_man.get_instance_data(entity);
        auto filter = (light.filter->wrapped && !light.filter->wrapped->empty()) ? (*light.filter->wrapped).c_str() : "";
        std::array<char, 256> f;
        strcpy(f.data(), filter);
        filters.emplace_back("Light", f);
    }

    auto &rotator_man = component_system_man.managers.rotator_component_man;
    if (rotator_man.exists(entity)) {
        auto rotator = rotator_man.get_instance_data(entity);
        auto filter = (rotator.filter->wrapped && !rotator.filter->wrapped->empty()) ? (*rotator.filter->wrapped).c_str() : "";
        std::array<char, 256> f;
        strcpy(f.data(), filter);
        filters.emplace_back("Rotator", f);
    }

    return filters;
}

void update_filter(c_entity entity, std::string const& comp, std::array<char, 256> const& filter) {
    if (comp == "Gas Producer") {
        auto &gas_producer_man = component_system_man.managers.gas_producer_component_man;
        if (gas_producer_man.exists(entity)) {
            auto gas_producer = gas_producer_man.get_instance_data(entity);
            gas_producer.filter->set(filter.data());
        }
    }

    if (comp == "Light") {
        auto &light_man = component_system_man.managers.light_component_man;
        if (light_man.exists(entity)) {
            auto light = light_man.get_instance_data(entity);
            light.filter->set(filter.data());
        }
    }

    if (comp == "Rotator") {
        auto &rotator_man = component_system_man.managers.rotator_component_man;
        if (rotator_man.exists(entity)) {
            auto rotator = rotator_man.get_instance_data(entity);
            rotator.filter->set(filter.data());
        }
    }

}
