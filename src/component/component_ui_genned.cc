/* THIS FILE IS AUTOGENERATED BY gen/gen_comps.py; DO NOT HAND-MODIFY */

#include <vector>
#include "../component/component_system_manager.h"

extern component_system_manager component_system_man;

static void add_filter(std::vector<filter_ui_state> &filters, int field_id, wire_filter_ptr const & w, char const *name) {
    filters.emplace_back();
    auto & f = filters.back();
    f.component_name = name;
    f.field_id = field_id;

    if (w.wrapped) {
        strcpy(f.filter.data(), w.wrapped->c_str());
    }
    else {
        f.filter[0] = '\0';
    }
}

std::vector<filter_ui_state> get_filters(c_entity entity) {
    std::vector<filter_ui_state> filters;

    auto &gas_producer_man = component_system_man.managers.gas_producer_component_man;
    if (gas_producer_man.exists(entity)) {
        auto gas_producer = gas_producer_man.get_instance_data(entity);
        add_filter(filters, 0, *(gas_producer.filter), "Gas Producer");
    }

    auto &light_man = component_system_man.managers.light_component_man;
    if (light_man.exists(entity)) {
        auto light = light_man.get_instance_data(entity);
        add_filter(filters, 1, *(light.filter), "Light");
    }

    auto &rotator_man = component_system_man.managers.rotator_component_man;
    if (rotator_man.exists(entity)) {
        auto rotator = rotator_man.get_instance_data(entity);
        add_filter(filters, 2, *(rotator.filter), "Rotator");
    }

    return filters;
}

void update_filter(c_entity entity, filter_ui_state const& filter) {
    switch (filter.field_id) {
    case 0: {
        auto &gas_producer_man = component_system_man.managers.gas_producer_component_man;
        if (gas_producer_man.exists(entity)) {
            auto gas_producer = gas_producer_man.get_instance_data(entity);
            gas_producer.filter->set(filter.filter.data());
        }
    } break;

    case 1: {
        auto &light_man = component_system_man.managers.light_component_man;
        if (light_man.exists(entity)) {
            auto light = light_man.get_instance_data(entity);
            light.filter->set(filter.filter.data());
        }
    } break;

    case 2: {
        auto &rotator_man = component_system_man.managers.rotator_component_man;
        if (rotator_man.exists(entity)) {
            auto rotator = rotator_man.get_instance_data(entity);
            rotator.filter->set(filter.filter.data());
        }
    } break;

    }
}
