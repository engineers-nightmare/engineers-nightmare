#pragma once

/* THIS FILE IS AUTOGENERATED BY gen/gen_comps.py; DO NOT HAND-MODIFY */

#include <libconfig.h>
#include <memory>

#include "component_manager.h"
#include "../enums/enums.h"
#include "wire_filter.h"

struct rotator_stepped_component_manager : component_manager<rotator_stepped_component_manager> {
    struct instance_data {
        c_entity *entity;
        wire_filter_ptr *step_up_filter;
        wire_filter_ptr *step_down_filter;
        glm::vec3 *axis;
        glm::vec3 *offset;
        float *speed;
        float *step_size;
        float *angle;
        float *desired_angle;
        bool *continuous;
    } instance_pool;

    void create_component_instance_data(unsigned count) override;
    void destroy_instance(instance i) override;
    void entity(c_entity e) override;

    static const char* get_ui_name() {
        return "Stepped Rotator";
    }

    instance_data get_instance_data(c_entity e) {
        instance_data d{};
        auto inst = lookup(e);

        d.entity = instance_pool.entity + inst.index;
        d.step_up_filter = instance_pool.step_up_filter + inst.index;
        d.step_down_filter = instance_pool.step_down_filter + inst.index;
        d.axis = instance_pool.axis + inst.index;
        d.offset = instance_pool.offset + inst.index;
        d.speed = instance_pool.speed + inst.index;
        d.step_size = instance_pool.step_size + inst.index;
        d.angle = instance_pool.angle + inst.index;
        d.desired_angle = instance_pool.desired_angle + inst.index;
        d.continuous = instance_pool.continuous + inst.index;

        return d;
    }
};

struct rotator_stepped_component_stub : component_stub {
    rotator_stepped_component_stub() = default;

    glm::vec3 axis{};
    glm::vec3 offset{};
    float speed{};
    float step_size{};
    bool continuous{};

    void
    assign_component_to_entity(c_entity entity) override;

    static std::unique_ptr<component_stub> from_config(config_setting_t const *config);

    std::vector<std::string>
    get_dependencies() override;
};
