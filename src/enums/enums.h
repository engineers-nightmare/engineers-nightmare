#pragma once

#include <libconfig.h>
#include "../libconfig_shim.h"

/* THIS FILE IS AUTOGENERATED BY gen/gen_enums.py; DO NOT HAND-MODIFY */


template<typename T>
    T get_enum(const char *e);


// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
enum class placement
{
    full_block_snapped = 0,
    half_block_snapped = 1,
    quarter_block_snapped = 2,
    eighth_block_snapped = 3,
    invalid = -1,
};

const char* get_enum_description(placement value);

const char* get_enum_string(placement value);

template<> placement get_enum<placement>(const char *e);

placement config_setting_get_placement(const config_setting_t *setting);

int config_setting_set_placement(config_setting_t *setting, placement value);

int config_setting_lookup_placement(const config_setting_t *setting, const char *name, placement *value);

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
enum class rotation
{
    axis_aligned = 0,
    rot_45 = 1,
    rot_15 = 2,
    no_rotation = 3,
    invalid = -1,
};

const char* get_enum_description(rotation value);

const char* get_enum_string(rotation value);

template<> rotation get_enum<rotation>(const char *e);

rotation config_setting_get_rotation(const config_setting_t *setting);

int config_setting_set_rotation(config_setting_t *setting, rotation value);

int config_setting_lookup_rotation(const config_setting_t *setting, const char *name, rotation *value);

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
enum class window_mode
{
    windowed = 0,
    fullscreen = 1,
    invalid = -1,
};

const char* get_enum_description(window_mode value);

const char* get_enum_string(window_mode value);

template<> window_mode get_enum<window_mode>(const char *e);

window_mode config_setting_get_window_mode(const config_setting_t *setting);

int config_setting_set_window_mode(config_setting_t *setting, window_mode value);

int config_setting_lookup_window_mode(const config_setting_t *setting, const char *name, window_mode *value);
