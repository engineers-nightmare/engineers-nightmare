/* THIS FILE IS AUTOGENERATED BY gen/gen_enums.py; DO NOT HAND-MODIFY */

#include "enums.h"

#include <cassert>
#include <cstring>


// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
const char* get_enum_description(msg_type value) {
    switch(value)
    {
    case msg_type::any:
        return "Match anything";
    case msg_type::switch_transition:
        return "Switch";
    case msg_type::pressure_sensor:
        return "Pressure";
    case msg_type::sensor_comparison:
        return "Sensor Comparison";
    case msg_type::proximity_sensor:
        return "Proximity Sensor";
    default:
        assert(false);
        return nullptr;
    }
}

const char* get_enum_string(msg_type value) {
    switch(value)
    {
    case msg_type::any:
        return "any";
    case msg_type::switch_transition:
        return "switch_transition";
    case msg_type::pressure_sensor:
        return "pressure_sensor";
    case msg_type::sensor_comparison:
        return "sensor_comparison";
    case msg_type::proximity_sensor:
        return "proximity_sensor";
    default:
        assert(false);
        return nullptr;
    }
}

template<> msg_type get_enum<msg_type>(const char *e) {
    auto val{msg_type::invalid};
    if (!strcmp(e, "any")) {
        val = msg_type::any;
    }
    if (!strcmp(e, "switch_transition")) {
        val = msg_type::switch_transition;
    }
    if (!strcmp(e, "pressure_sensor")) {
        val = msg_type::pressure_sensor;
    }
    if (!strcmp(e, "sensor_comparison")) {
        val = msg_type::sensor_comparison;
    }
    if (!strcmp(e, "proximity_sensor")) {
        val = msg_type::proximity_sensor;
    }
    assert(val != msg_type::invalid);
    return val;
}

msg_type config_setting_get_msg_type(const config_setting_t *setting) {
    const char *str = config_setting_get_string(setting);
    return get_enum<msg_type>(str);
}

int config_setting_set_msg_type(config_setting_t *setting, msg_type value) {
    auto str = get_enum_string(value);
    return (config_setting_set_string(setting, str));
}

int config_setting_lookup_msg_type(const config_setting_t *setting, const char *name, msg_type *value) {
    auto *member = config_setting_get_member(setting, name);
    if(!member) {
        return CONFIG_FALSE;
    }

    *value = (msg_type)config_setting_get_msg_type(member);
    return CONFIG_TRUE;
}

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
const char* get_enum_description(placement value) {
    switch(value)
    {
    case placement::full_block_snapped:
        return "placement";
    case placement::half_block_snapped:
        return "placement";
    case placement::quarter_block_snapped:
        return "placement";
    case placement::eighth_block_snapped:
        return "placement";
    default:
        assert(false);
        return nullptr;
    }
}

const char* get_enum_string(placement value) {
    switch(value)
    {
    case placement::full_block_snapped:
        return "full_block_snapped";
    case placement::half_block_snapped:
        return "half_block_snapped";
    case placement::quarter_block_snapped:
        return "quarter_block_snapped";
    case placement::eighth_block_snapped:
        return "eighth_block_snapped";
    default:
        assert(false);
        return nullptr;
    }
}

template<> placement get_enum<placement>(const char *e) {
    auto val{placement::invalid};
    if (!strcmp(e, "full_block_snapped")) {
        val = placement::full_block_snapped;
    }
    if (!strcmp(e, "half_block_snapped")) {
        val = placement::half_block_snapped;
    }
    if (!strcmp(e, "quarter_block_snapped")) {
        val = placement::quarter_block_snapped;
    }
    if (!strcmp(e, "eighth_block_snapped")) {
        val = placement::eighth_block_snapped;
    }
    assert(val != placement::invalid);
    return val;
}

placement config_setting_get_placement(const config_setting_t *setting) {
    const char *str = config_setting_get_string(setting);
    return get_enum<placement>(str);
}

int config_setting_set_placement(config_setting_t *setting, placement value) {
    auto str = get_enum_string(value);
    return (config_setting_set_string(setting, str));
}

int config_setting_lookup_placement(const config_setting_t *setting, const char *name, placement *value) {
    auto *member = config_setting_get_member(setting, name);
    if(!member) {
        return CONFIG_FALSE;
    }

    *value = (placement)config_setting_get_placement(member);
    return CONFIG_TRUE;
}

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
const char* get_enum_description(window_mode value) {
    switch(value)
    {
    case window_mode::windowed:
        return "Windowed";
    case window_mode::fullscreen:
        return "Fullscreen";
    default:
        assert(false);
        return nullptr;
    }
}

const char* get_enum_string(window_mode value) {
    switch(value)
    {
    case window_mode::windowed:
        return "windowed";
    case window_mode::fullscreen:
        return "fullscreen";
    default:
        assert(false);
        return nullptr;
    }
}

template<> window_mode get_enum<window_mode>(const char *e) {
    auto val{window_mode::invalid};
    if (!strcmp(e, "windowed")) {
        val = window_mode::windowed;
    }
    if (!strcmp(e, "fullscreen")) {
        val = window_mode::fullscreen;
    }
    assert(val != window_mode::invalid);
    return val;
}

window_mode config_setting_get_window_mode(const config_setting_t *setting) {
    const char *str = config_setting_get_string(setting);
    return get_enum<window_mode>(str);
}

int config_setting_set_window_mode(config_setting_t *setting, window_mode value) {
    auto str = get_enum_string(value);
    return (config_setting_set_string(setting, str));
}

int config_setting_lookup_window_mode(const config_setting_t *setting, const char *name, window_mode *value) {
    auto *member = config_setting_get_member(setting, name);
    if(!member) {
        return CONFIG_FALSE;
    }

    *value = (window_mode)config_setting_get_window_mode(member);
    return CONFIG_TRUE;
}
